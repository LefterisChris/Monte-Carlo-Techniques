library(Matrix)
library(matrixStats)
rm(list=ls())
set.seed(1)
Maturity =3
N = 10000
P = 1000
S0 = 100
r=0.04
sigma_low = 0.25
sigma_high = 0.75
lambda_low = 1
lambda_high = 3
K = c(50,100,150)
St = rep(S0,N)
Yt = rep(0,N)
for(i in 1:N){
t = 0
curr_sigma = sigma_low
curr_lambda = lambda_low
new_sigma = sigma_high
new_lambda = lambda_high
while (t < Maturity){
U = runif(1)
t_jump = -log(U)/curr_lambda
if (t+t_jump <= Maturity){
dlt = t_jump
t = t + t_jump
}
else{
dlt = Maturity - t
t = Maturity
}
Z = rnorm(1)
Yt[i] = Yt[i]+((r-sigma_low^2/2)*dlt+sigma_low*sqrt(dlt)*Z)
St[i] = St[i]*exp((r-curr_sigma^2/2)*dlt+curr_sigma*sqrt(dlt)*Z)
tmp = curr_sigma
curr_sigma = new_sigma
new_sigma = tmp
tmp = curr_lambda
curr_lambda = new_lambda
new_lambda = tmp
}
}
mu_Y = mean(Yt)
# Initial estimator
C = matrix(0,nrow = N,ncol = length(K))
for(i in 1:length(K)){
tmp = matrix(c(rep(0,N),St-K[i]),ncol=2)
C[,i] = exp(-r*Maturity)*rowMaxs(tmp)
}
c2 = as.vector(-cov(Yt,C)/var(Yt))
C = matrix(0,nrow = N,ncol = length(K))
C2 = matrix(0,nrow = N,ncol = length(K))
for(i in 1:length(K)){
tmp = matrix(c(rep(0,N),St-K[i]),ncol=2)
C[,i] = exp(-r*Maturity)*rowMaxs(tmp)
C2[,i] = exp(-r*Maturity)*rowMaxs(tmp)+c2[i]*(Yt-mu_Y)
}
cat("Prices:",colMeans(C),"\n")
cat("Regular variances:",colVars(C),"\n")
cat("Prices with control variable Yt:",colMeans(C2),"\n")
cat("Control variable Yt:",colVars(C2),"\n")
q()
