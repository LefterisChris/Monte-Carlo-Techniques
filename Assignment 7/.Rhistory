M = 8
# number of iterations
N = 1000
# number of burn-in iterations
N0 = 2*N
# total iterations
tot_iter = 2*N + N0
# define matrix for parameters with samples per chain
theta1_samples = matrix(0.0,nrow = M,ncol = N)
theta2_samples = matrix(0.0,nrow = M,ncol = N)
theta3_samples = matrix(0.0,nrow = M,ncol = N)
theta4_samples = matrix(0.0,nrow = M,ncol = N)
mu_samples = matrix(0.0,nrow = M,ncol = N)
sigma_samples = matrix(0.0,nrow = M,ncol = N)
tau_samples = matrix(0.0,nrow = M,ncol = N)
for(chain in 1:(M/2)){
# for each chain
# initialize parameters
thetas = c()
for(i in 1:J){
thetas = c(thetas,sample(data[i,which(data[i,]!=0)],size = 1))
}
mu = mean(thetas)
# parameters: theta1,theta2,theta3,theta4,mu,sigma,tau
parameters = c(thetas,mu,0,0)
# begin Gibbs sampling
for(iter in 1:tot_iter){
# for each iteration 2*N+N0
# generate from conditional posterior distribution of sigma
tmp = 0;
for(i in 1:J){
tmp = tmp + sum((data[i,which(data[i,]!=0)]-parameters[1:J][i])^2)/n
}
sigma_2 = n*tmp/rchisq(1,df=n)
parameters[J+2] = sqrt(sigma_2)
# generate from conditional posterior distribution of tau
tmp = sum((parameters[1:J]-parameters[J+1])^2)/(J-1)
tau_2 = (J-1)*tmp/rchisq(1,df=(J-1))
parameters[J+3] = sqrt(tau_2)
# generate from conditional posterior distribution of mu
tmp = sum(parameters[1:J])/J
mu = rnorm(n=1,mean=tmp,sd = sqrt(parameters[J+3]^2/J))
parameters[J+1] = mu
for(k in 1:J){
#generate from conditional posterior distribution of theta j
idx = which(data[k,]!=0)
theta_j_hat = (mu/parameters[J+3]^2+length(idx)*mean(data[k,idx])/parameters[J+2]^2)/(1/parameters[J+3]^2+length(idx)/parameters[J+2]^2)
var_j_hat = 1/(1/parameters[J+3]^2+length(idx)/parameters[J+2]^2)
parameters[k] = rnorm(n=1,mean = theta_j_hat,sd = sqrt(var_j_hat))
}
if(iter > N0){
# we discard the first N0 samples as burn-in samples
if(iter <= (N0+N)){
# split the chain into two each containing N samples.
theta1_samples[chain,iter-N0] = parameters[1]
theta2_samples[chain,iter-N0] = parameters[2]
theta3_samples[chain,iter-N0] = parameters[3]
theta4_samples[chain,iter-N0] = parameters[4]
mu_samples[chain,iter-N0] = parameters[5]
sigma_samples[chain,iter-N0] = parameters[6]
tau_samples[chain,iter-N0] = parameters[7]
}
else{
theta1_samples[chain+M/2,iter-N0-N] = parameters[1]
theta2_samples[chain+M/2,iter-N0-N] = parameters[2]
theta3_samples[chain+M/2,iter-N0-N] = parameters[3]
theta4_samples[chain+M/2,iter-N0-N] = parameters[4]
mu_samples[chain+M/2,iter-N0-N] = parameters[5]
sigma_samples[chain+M/2,iter-N0-N] = parameters[6]
tau_samples[chain+M/2,iter-N0-N] = parameters[7]
}
}
}
}
# run the diagnostic test
Gelman_Rubin_diagnostic(theta1_samples)
Gelman_Rubin_diagnostic(theta2_samples)
Gelman_Rubin_diagnostic(theta3_samples)
Gelman_Rubin_diagnostic(theta4_samples)
Gelman_Rubin_diagnostic(mu_samples)
Gelman_Rubin_diagnostic(sigma_samples)
Gelman_Rubin_diagnostic(tau_samples)
#### Exe 3 ####
Gelman_Rubin_diagnostic <- function(param) {
dims = dim(param)
chain_means = rowMeans(param)
grand_mean = mean(chain_means)
# between-sequence variance
B = dims[2]/(dims[1]-1)*sum((chain_means-grand_mean)^2)
# within-sequence variance
tmp = 0.0
for(i in 1:dims[1]){
tmp = tmp + sum((param[i,]-chain_means[i])^2)/(dims[2]-1)
}
W = tmp/dims[1]
# var hat
var_hat = (dims[2]-1)/dims[2]*W+B/dims[2]
# R statistical summary of MCMC that diagnoses convergenve.
# Good values close to 1
R = sqrt(var_hat/W)
return(R)
}
data = matrix(c(62,60,63,59,0,0,0,0,63,67,71,64,65,66,0,0,68,66,71,67,68,68,0,0,52,62,60,61,63,64,63,59),
nrow=4,byrow = T)
J = dim(data)[1]
n = length(which(data!=0))
# number of chains
M = 8
# number of iterations
N = 50
# number of burn-in iterations
N0 = 2*N
# total iterations
tot_iter = 2*N + N0
# define matrix for parameters with samples per chain
theta1_samples = matrix(0.0,nrow = M,ncol = N)
theta2_samples = matrix(0.0,nrow = M,ncol = N)
theta3_samples = matrix(0.0,nrow = M,ncol = N)
theta4_samples = matrix(0.0,nrow = M,ncol = N)
mu_samples = matrix(0.0,nrow = M,ncol = N)
sigma_samples = matrix(0.0,nrow = M,ncol = N)
tau_samples = matrix(0.0,nrow = M,ncol = N)
for(chain in 1:(M/2)){
# for each chain
# initialize parameters
thetas = c()
for(i in 1:J){
thetas = c(thetas,sample(data[i,which(data[i,]!=0)],size = 1))
}
mu = mean(thetas)
# parameters: theta1,theta2,theta3,theta4,mu,sigma,tau
parameters = c(thetas,mu,0,0)
# begin Gibbs sampling
for(iter in 1:tot_iter){
# for each iteration 2*N+N0
# generate from conditional posterior distribution of sigma
tmp = 0;
for(i in 1:J){
tmp = tmp + sum((data[i,which(data[i,]!=0)]-parameters[1:J][i])^2)/n
}
sigma_2 = n*tmp/rchisq(1,df=n)
parameters[J+2] = sqrt(sigma_2)
# generate from conditional posterior distribution of tau
tmp = sum((parameters[1:J]-parameters[J+1])^2)/(J-1)
tau_2 = (J-1)*tmp/rchisq(1,df=(J-1))
parameters[J+3] = sqrt(tau_2)
# generate from conditional posterior distribution of mu
tmp = sum(parameters[1:J])/J
mu = rnorm(n=1,mean=tmp,sd = sqrt(parameters[J+3]^2/J))
parameters[J+1] = mu
for(k in 1:J){
#generate from conditional posterior distribution of theta j
idx = which(data[k,]!=0)
theta_j_hat = (mu/parameters[J+3]^2+length(idx)*mean(data[k,idx])/parameters[J+2]^2)/(1/parameters[J+3]^2+length(idx)/parameters[J+2]^2)
var_j_hat = 1/(1/parameters[J+3]^2+length(idx)/parameters[J+2]^2)
parameters[k] = rnorm(n=1,mean = theta_j_hat,sd = sqrt(var_j_hat))
}
if(iter > N0){
# we discard the first N0 samples as burn-in samples
if(iter <= (N0+N)){
# split the chain into two each containing N samples.
theta1_samples[chain,iter-N0] = parameters[1]
theta2_samples[chain,iter-N0] = parameters[2]
theta3_samples[chain,iter-N0] = parameters[3]
theta4_samples[chain,iter-N0] = parameters[4]
mu_samples[chain,iter-N0] = parameters[5]
sigma_samples[chain,iter-N0] = parameters[6]
tau_samples[chain,iter-N0] = parameters[7]
}
else{
theta1_samples[chain+M/2,iter-N0-N] = parameters[1]
theta2_samples[chain+M/2,iter-N0-N] = parameters[2]
theta3_samples[chain+M/2,iter-N0-N] = parameters[3]
theta4_samples[chain+M/2,iter-N0-N] = parameters[4]
mu_samples[chain+M/2,iter-N0-N] = parameters[5]
sigma_samples[chain+M/2,iter-N0-N] = parameters[6]
tau_samples[chain+M/2,iter-N0-N] = parameters[7]
}
}
}
}
# run the diagnostic test
Gelman_Rubin_diagnostic(theta1_samples)
Gelman_Rubin_diagnostic(theta2_samples)
Gelman_Rubin_diagnostic(theta3_samples)
Gelman_Rubin_diagnostic(theta4_samples)
Gelman_Rubin_diagnostic(mu_samples)
Gelman_Rubin_diagnostic(sigma_samples)
Gelman_Rubin_diagnostic(tau_samples)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
theta1_samples
colMeans(theta1_samples)
tst = colMeans(theta1_samples)
plot(tst)
sort(tst)
plot(sort(tst))
sort(tst)
sort(tst)[1]
sort(tst)[0.025*50]
0.025*50
floor(0.025*50)
sort(tst)[floor(0.025*50)]
sort(tst)[floor(0.25*50)]
0.25*50
sort(tst)[floor(0.50*50)]
sort(tst)[floor(0.75*50)]
sort(tst)[floor(0.975*50)]
cat('Estimand\t Posterior Quantiles\t R\n')
cat('----------------------------------\n')
cat('Estimand\t Posterior Quantiles\t R\n')
cat('----------------------------------\n')
cat('-----------------------------------------\n')
cat('-------------------------------------------\n')
cat('θ1')
cat('θ1\τ')
cat('Estimand\t Posterior Quantiles\t R\n')
cat('-------------------------------------------\n')
cat('θ1\τ')
cat('\t2.5%')
cat('Estimand\t\t Posterior Quantiles\t R\n')
cat('\t\t2.5%')
cat('Estimand\t\t Posterior Quantiles\t R\n')
cat('\t\t2.5%\t25%\t50%\75%\97.5%')
cat('Estimand\t\t Posterior Quantiles\t R\n')
cat('\t\t2.5%\t25%\t50%\t75%\t97.5%\n')
cat('Estimand\t\t Posterior Quantiles\t\t R\n')
cat('\t\t2.5%\t25%\t50%\t75%\t97.5%\n')
cat('θ1\t')
theta1 = sort(colMeans(theta1_samples))
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('θ1\t\t%.2f',theta1[floor(0.025*N)])
cat('θ1\t\t %.2f',theta1[floor(0.025*N)])
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('\t\t2.5%\t25%\t50%\t75%\t97.5%\n')
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('\t\t2.5%\t\t25%\t50%\t75%\t97.5%\n')
cat('-------------------------------------------\n')
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('\t\t 2.5%\t\t25%\t50%\t75%\t97.5%\n')
cat('-------------------------------------------\n')
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('Estimand\t\t Posterior Quantiles\t\t R\n')
cat('\t\t 2.5%\t\t 25%\t\t 50%\t\t 75%\t\t 97.5%\n')
cat('-------------------------------------------\n')
cat('θ1\t\t',theta1[floor(0.025*N)])
cat('θ1\t\t',theta1[floor(0.025*N)],theta1[floor(0.25*N)])
cat('\t\t 2.5%\t 25%\t\t 50%\t\t 75%\t\t 97.5%\n')
cat('\t\t 2.5%\t  25%\t\t 50%\t\t 75%\t\t 97.5%\n')
cat('θ1\t\t',theta1[floor(0.025*N)],theta1[floor(0.25*N)])
cat('θ1\t\t',theta1[floor(0.025*N)],theta1[floor(0.25*N)],theta1[floor(0.5*N)],theta1[floor(0.75*N)],theta1[floor(0.975*N)],Gelman_Rubin_diagnostic(theta1_samples))
cat('\t\t 2.5%\t  25%\t\t 50%\t\t 75%\t\t 97.5%\n')
cat('-------------------------------------------\n')
cat('θ1\t\t',theta1[floor(0.025*N)],theta1[floor(0.25*N)],theta1[floor(0.5*N)],theta1[floor(0.75*N)],theta1[floor(0.975*N)],Gelman_Rubin_diagnostic(theta1_samples))
cat('\t\t 2.5%\t  25%\t 50%\t\t 75%\t\t 97.5%\n')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R', encoding = 'UTF-8')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R', encoding = 'UTF-8')
cat('θ1\t\t',theta1[floor(0.025*N)],theta1[floor(0.25*N)],theta1[floor(0.5*N)],theta1[floor(0.75*N)],theta1[floor(0.975*N)],Gelman_Rubin_diagnostic(theta1_samples),'\n')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R', encoding = 'UTF-8')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
round(3.1456,2)
theta1 = round(sort(colMeans(theta1_samples)),2)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
plot(tau)
plot(log(tau))
plot(sigma)
plot(sigma)
plot(log(sigma))
tau = round(sort(colMeans(log(tau_samples))),2)
plot(tau)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
plot(log(tau/(1-tau)))
plot(log(tau/(tau-1)))
plot(log(tau/(1-tau)))
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
data
View(theta1_samples)
View(theta1_samples)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
thetas = matrix(0,nrow=M/2,ncol=J)
for(i in 1:J){
thetas[,i] = c(thetas,sample(data[i,which(data[i,]!=0)],size = 4))
}
thetas = matrix(0,nrow=M/2,ncol=J)
for(i in 1:J){
thetas[,i] = sample(data[i,which(data[i,]!=0)],size = 4)
}
thetas
View(data)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
parameters
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
sigma_samples
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
parameters[1:J][1]
parameters
data = matrix(c(62,60,63,59,0,0,0,0,63,67,71,64,65,66,0,0,68,66,71,67,68,68,0,0,52,62,60,61,63,64,63,59),
nrow=4,byrow = T)
J = dim(data)[1]
n = length(which(data!=0))
# number of chains
M = 8
# number of iterations
N = 50
# number of burn-in iterations
N0 = 2*N
# total iterations
tot_iter = 2*N + N0
# define matrix for parameters with samples per chain
theta1_samples = matrix(0.0,nrow = M,ncol = N)
theta2_samples = matrix(0.0,nrow = M,ncol = N)
theta3_samples = matrix(0.0,nrow = M,ncol = N)
theta4_samples = matrix(0.0,nrow = M,ncol = N)
mu_samples = matrix(0.0,nrow = M,ncol = N)
sigma_samples = matrix(0.0,nrow = M,ncol = N)
tau_samples = matrix(0.0,nrow = M,ncol = N)
#initialize thetas with over-dispersed values
thetas = matrix(0,nrow=M/2,ncol=J)
for(i in 1:J){
thetas[,i] = sample(data[i,which(data[i,]!=0)],size = 4)
}
parameters
chain=1
mu = mean(thetas[chain,])
parameters = c(thetas[chain,],mu,0,0)
parameters
data
data[i,which(data[i,]!=0)]
i
i=1
data[i,which(data[i,]!=0)]
data[i,which(data[i,]!=0)]-parameters[i]
(data[i,which(data[i,]!=0)]-parameters[i])^2
sum((data[i,which(data[i,]!=0)]-parameters[i])^2)
sum((data[2,which(data[2,]!=0)]-parameters[2])^2)
sum((data[3,which(data[3,]!=0)]-parameters[3])^2)
sum((data[4,which(data[4,]!=0)]-parameters[4])^2)
tmp = 0;
for(i in 1:J){
tmp = tmp + sum((data[i,which(data[i,]!=0)]-parameters[i])^2)/n
}
tmp
232/24
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
plot(theta1)
hist(theta1)
hist(theta2)
source('~/Financial Engineering - CU/Spring 2017/Monte Carlo Simulations/Assignment 7/exe3.R')
hist(theta1)
hist(theta2)
hist(theta3)
hist(theta4)
hist(mu)
hist(sigma)
hist(sigma^2)
hist(tau)
hist(tau^2)
hist(tau)
